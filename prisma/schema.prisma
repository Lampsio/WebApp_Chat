// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  name              String
  surname           String
  password          String
  short_description String?
  picture_profile   String?  @default("/Images_Profile/Custom_Profile.png")
  status            Status   @default(AVAILABLE)
  friends1          Friend[] @relation("UserFriends1")
  friends2          Friend[] @relation("UserFriends2")
  sentMessages      Message[] @relation("SentMessages")
  receivedMessages  Message[] @relation("ReceivedMessages")
  sentInvitations   FriendRequest[] @relation("SentInvitations")
  receivedInvitations FriendRequest[] @relation("ReceivedInvitations")
}

model Friend {
  id        Int    @id @default(autoincrement())
  userId    Int
  friendId  Int
  user      User   @relation(name: "UserFriends1", fields: [userId], references: [id])
  friend    User   @relation(name: "UserFriends2", fields: [friendId], references: [id])
}

model Message {
  id        Int    @id @default(autoincrement())
  senderId  Int
  receiverId Int
  content   String
  timestamp DateTime @default(now())
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model FriendRequest {
  id        Int    @id @default(autoincrement())
  senderId  Int
  receiverId Int
  status    FriendRequestStatus @default(PENDING)
  sender    User   @relation("SentInvitations", fields: [senderId], references: [id])
  receiver  User   @relation("ReceivedInvitations", fields: [receiverId], references: [id])
}

enum Status {
  AVAILABLE
  BUSY
  AWAY
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
